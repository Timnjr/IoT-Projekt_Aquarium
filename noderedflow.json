[
    {
        "id": "2c332c1972a41a76",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1fc33682e419a5d9",
        "type": "mqtt in",
        "z": "2c332c1972a41a76",
        "name": "ESP32-Messwerte",
        "topic": "esp32/aquariumwerte",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "b18a955c8d8ca218",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "cd9e4af84ac20610",
                "772070e7d808f130",
                "0c2b93e17d333c68"
            ]
        ]
    },
    {
        "id": "cd9e4af84ac20610",
        "type": "function",
        "z": "2c332c1972a41a76",
        "name": "Temperatur weitergeben",
        "func": "var temperatur = {payload: msg.payload.temperatur};\nreturn temperatur;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "39f94a391dd53e74",
                "ba1bd5f4b94668f7"
            ]
        ]
    },
    {
        "id": "772070e7d808f130",
        "type": "function",
        "z": "2c332c1972a41a76",
        "name": "Durchfluss weitergeben",
        "func": "var durchfluss = {payload: msg.payload.durchfluss};\nreturn durchfluss;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 260,
        "wires": [
            [
                "cbfd74bf359b6e2d",
                "b03dc2c5b33ef29e",
                "1eba0b0b1890494d"
            ]
        ]
    },
    {
        "id": "ba1bd5f4b94668f7",
        "type": "ui_gauge",
        "z": "2c332c1972a41a76",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 1,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Wassertemperatur",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "colors": [
            "#ca3838",
            "#04e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "27",
        "diff": false,
        "className": "",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "cbfd74bf359b6e2d",
        "type": "ui_gauge",
        "z": "2c332c1972a41a76",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 2,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Durchfluss",
        "label": "L/min",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#ca3838",
            "#41d72d",
            "#ca3838"
        ],
        "seg1": "5",
        "seg2": "13",
        "diff": false,
        "className": "",
        "x": 950,
        "y": 260,
        "wires": []
    },
    {
        "id": "b03dc2c5b33ef29e",
        "type": "ui_chart",
        "z": "2c332c1972a41a76",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 8,
        "width": 6,
        "height": 6,
        "label": "Durchfluss",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 950,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "39f94a391dd53e74",
        "type": "ui_chart",
        "z": "2c332c1972a41a76",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 7,
        "width": 6,
        "height": 6,
        "label": "Wassertemperatur",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "30",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 970,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7d397b9ece9d3c47",
        "type": "ui_led",
        "z": "2c332c1972a41a76",
        "order": 5,
        "group": "25a2b5d2092b71fa",
        "width": 4,
        "height": 3,
        "label": "Servo Aktiv",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 930,
        "y": 560,
        "wires": []
    },
    {
        "id": "cbb528ba9fc27fe0",
        "type": "mysql",
        "z": "2c332c1972a41a76",
        "mydb": "bc803e8d57774319",
        "name": "Datenbank",
        "x": 950,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "0c2b93e17d333c68",
        "type": "function",
        "z": "2c332c1972a41a76",
        "name": "Daten für Datenbank vorbereiten",
        "func": "// Daten aus dem msg.payload Objekt extrahieren\nlet temperaturWert = msg.payload.temperatur;\nlet durchflussWert = msg.payload.durchfluss;\n\n// Servo-Status aus dem Flow-Kontext holen (wird von Steuerlogik-Ausgang 2 gesetzt)\nlet servoStatusBool = flow.get(\"servoStatus\"); // Holt true oder false\n\n// Wert für die Datenbank vorbereiten -> \"ON\" oder \"OFF\" für den Servo\nlet servoStatusDb = (servoStatusBool === true) ? \"ON\" : \"OFF\"; \n\n// SQL-Query als Topic setzen (unverändert)\nmsg.topic = \"INSERT INTO messwerte (temperatur, durchfluss, servo_aktiv) VALUES (?, ?, ?)\";\n\n// Das Array mit den Werten für die Platzhalter erstellen\nmsg.payload = [temperaturWert, durchflussWert, servoStatusDb];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 80,
        "wires": [
            [
                "cbb528ba9fc27fe0"
            ]
        ]
    },
    {
        "id": "65b52e432dd6b46c",
        "type": "mqtt out",
        "z": "2c332c1972a41a76",
        "name": "Servo Ansteuerung",
        "topic": "esp32/servo/set",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b18a955c8d8ca218",
        "x": 970,
        "y": 500,
        "wires": []
    },
    {
        "id": "adfb110afbdf18b7",
        "type": "ui_switch",
        "z": "2c332c1972a41a76",
        "name": "",
        "label": "Servo Handbetrieb",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 6,
        "width": 4,
        "height": 3,
        "passthru": false,
        "decouple": "false",
        "topic": "ui/manual_servo",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 370,
        "y": 440,
        "wires": [
            [
                "1eba0b0b1890494d"
            ]
        ]
    },
    {
        "id": "b7151e3c1c7616a8",
        "type": "ui_numeric",
        "z": "2c332c1972a41a76",
        "name": "",
        "label": "Automatikbetrieb: Schwellenwert L/min",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 3,
        "width": 8,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "ui/threshold",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "step": 1,
        "className": "",
        "x": 310,
        "y": 620,
        "wires": [
            [
                "1eba0b0b1890494d"
            ]
        ]
    },
    {
        "id": "5b3c92ae61fb801d",
        "type": "ui_switch",
        "z": "2c332c1972a41a76",
        "name": "",
        "label": "Handbetrieb EIN",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 4,
        "width": 8,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "ui/mode",
        "topicType": "str",
        "style": "",
        "onvalue": "MANUAL",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "AUTO",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 370,
        "y": 560,
        "wires": [
            [
                "1eba0b0b1890494d",
                "0b58ced94448bb94"
            ]
        ]
    },
    {
        "id": "1eba0b0b1890494d",
        "type": "function",
        "z": "2c332c1972a41a76",
        "name": "Steuerlogik",
        "func": "//Dies ist die Steuerlogik die entscheidet ob der Servo-Motor eingeschalten wird\n// Variablen aus dem Flow-Kontext holen (mit Standardwerten)\nlet mode = flow.get(\"controlMode\") || \"AUTO\"; // Standard: Automatik\nlet threshold = flow.get(\"flowThreshold\") || 7.0; // Standard: 7 L/min\nlet manualCommand = flow.get(\"lastManualCommand\") || \"OFF\"; // Letzter manueller Zustand\nlet currentFlow = flow.get(\"currentFlow\") || -1; // Letzter bekannter Flusswert\nlet triggeredByModeChange = false; // Flag für jede Ausführung zurücksetzen\n\n// Kontext aktualisieren basierend auf dem Auslöser der Nachricht\nif (msg.topic === 'ui/mode') {\n    mode = msg.payload;\n    flow.set(\"controlMode\", mode);\n    triggeredByModeChange = true; // Flag setzen, dass Modus geändert wurde\n} else if (msg.topic === 'ui/threshold') {\n    threshold = Number(msg.payload); // Sicherstellen, dass es eine Zahl ist\n    flow.set(\"flowThreshold\", threshold);\n} else if (msg.topic === 'ui/manual_servo') {\n    manualCommand = msg.payload;\n    flow.set(\"lastManualCommand\", manualCommand);\n} else if (typeof msg.payload === 'number' && msg.topic !== 'ui/threshold') {\n    // Annehmen, dass eine Zahl ohne bekanntes Topic der neue Flusswert ist\n    currentFlow = msg.payload;\n    flow.set(\"currentFlow\", currentFlow);\n}\n\nlet servoCommand = \"OFF\"; // Standard-Servobefehl\n\n// Logik: Entscheide den Servo-Befehl basierend auf dem Modus\nif (mode === \"MANUAL\") {\n    // Im manuellen Modus gilt der zuletzt gesetzte manuelle Befehl\n    servoCommand = manualCommand;\n} else { // AUTO Modus\n    if (currentFlow >= 0) { // Nur wenn Flusswert gültig ist\n        // Logik: Servo AN, wenn Fluss < Schwellenwert\n        if (currentFlow < threshold) {\n            servoCommand = \"ON\";\n        } else {\n            servoCommand = \"OFF\";\n        }\n    } else {\n        // Bei ungültigem Flusswert sicherheitshalber AUS\n        servoCommand = \"OFF\";\n    }\n}\n\n// Prüfung, ob MQTT-Nachricht gesendet werden soll\nlet allowMqttSend = true;\n// Senden bei Wechsel zu Manual unterdrücken\nif (triggeredByModeChange && mode === \"MANUAL\") {\n    allowMqttSend = false;\n}\n// Senden bei reiner Threshold-Änderung unterdrücken\nelse if (msg.topic === 'ui/threshold') {\n    allowMqttSend = false;\n}\n\n// Vorbereitung der MQTT-Nachricht\nlet lastSentCommand = flow.get(\"lastSentCommand\") || \"\";\nlet mqttMsg = null;\n\nif (allowMqttSend && servoCommand !== lastSentCommand) {\n    flow.set(\"lastSentCommand\", servoCommand); // Neuen Zustand für nächsten Vergleich speichern\n    mqttMsg = {\n        payload: servoCommand\n        // Das Topic wird im nachfolgenden MQTT Out Node gesetzt\n    };\n}\n\n// Nachricht für die LED im Dashboard vorbereiten (wird immer gesendet)\nlet ledMsg = { payload: (servoCommand === \"ON\") }; // true für ON, false für OFF\n\n// Nachrichten an die beiden Ausgänge senden\n// Ausgang 1: MQTT Befehl (kann null sein)\n// Ausgang 2: LED Status (immer true oder false)\nreturn [ mqttMsg, ledMsg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 520,
        "wires": [
            [
                "65b52e432dd6b46c"
            ],
            [
                "7d397b9ece9d3c47",
                "272c77ff32ab5c04"
            ]
        ]
    },
    {
        "id": "0b58ced94448bb94",
        "type": "change",
        "z": "2c332c1972a41a76",
        "name": "Servo aus",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$$.payload = \"MANUAL\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 500,
        "wires": [
            [
                "adfb110afbdf18b7"
            ]
        ]
    },
    {
        "id": "272c77ff32ab5c04",
        "type": "change",
        "z": "2c332c1972a41a76",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "servoStatus",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "b18a955c8d8ca218",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "127.0.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "25a2b5d2092b71fa",
        "type": "ui_group",
        "name": "Aquarium",
        "tab": "2cc9ed1e8e85e295",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc803e8d57774319",
        "type": "MySQLdatabase",
        "name": "Datenbank",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "nodered_daten",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "2cc9ed1e8e85e295",
        "type": "ui_tab",
        "name": "Aquarium",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]