[
    {
        "id": "99696e55a19fa296",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0590783000b66aa5",
        "type": "mqtt in",
        "z": "99696e55a19fa296",
        "name": "ESP32-Messwerte",
        "topic": "esp32/aquariumwerte",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "b18a955c8d8ca218",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "030727d6473e5621",
                "7a9c046125fa96b5",
                "e5a61be626097cb1"
            ]
        ]
    },
    {
        "id": "030727d6473e5621",
        "type": "function",
        "z": "99696e55a19fa296",
        "name": "Temperatur weitergeben",
        "func": "var temperatur = {payload: msg.payload.temperatur};\nreturn temperatur;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 140,
        "wires": [
            [
                "5664cc2264938fdf",
                "cc69d697419b7fcf"
            ]
        ]
    },
    {
        "id": "7a9c046125fa96b5",
        "type": "function",
        "z": "99696e55a19fa296",
        "name": "Durchfluss weitergeben",
        "func": "var durchfluss = {payload: msg.payload.durchfluss};\nreturn durchfluss;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "9b5b9326b89817fc",
                "8def0e16f5d49f04",
                "8114fd31f2d5e8b3"
            ]
        ]
    },
    {
        "id": "cc69d697419b7fcf",
        "type": "ui_gauge",
        "z": "99696e55a19fa296",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 1,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Wassertemperatur",
        "label": "°C",
        "format": "{{value}}",
        "min": 0,
        "max": "30",
        "colors": [
            "#ca3838",
            "#04e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "27",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 120,
        "wires": []
    },
    {
        "id": "9b5b9326b89817fc",
        "type": "ui_gauge",
        "z": "99696e55a19fa296",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 2,
        "width": 6,
        "height": 6,
        "gtype": "gage",
        "title": "Durchfluss",
        "label": "L/min",
        "format": "{{value}}",
        "min": 0,
        "max": "20",
        "colors": [
            "#ca3838",
            "#41d72d",
            "#ca3838"
        ],
        "seg1": "5",
        "seg2": "13",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 220,
        "wires": []
    },
    {
        "id": "8def0e16f5d49f04",
        "type": "ui_chart",
        "z": "99696e55a19fa296",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 7,
        "width": 6,
        "height": 6,
        "label": "Durchfluss",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "20",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 870,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5664cc2264938fdf",
        "type": "ui_chart",
        "z": "99696e55a19fa296",
        "name": "",
        "group": "25a2b5d2092b71fa",
        "order": 6,
        "width": 6,
        "height": 6,
        "label": "Wassertemperatur",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "30",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "604800",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 890,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "2b21126f97ea4225",
        "type": "ui_led",
        "z": "99696e55a19fa296",
        "order": 8,
        "group": "25a2b5d2092b71fa",
        "width": 4,
        "height": 3,
        "label": "Servo Aktiv",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 850,
        "y": 520,
        "wires": []
    },
    {
        "id": "b2b519115a12bb3b",
        "type": "mysql",
        "z": "99696e55a19fa296",
        "mydb": "bc803e8d57774319",
        "name": "Datenbank",
        "x": 870,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e5a61be626097cb1",
        "type": "function",
        "z": "99696e55a19fa296",
        "name": "Daten für Datenbank vorbereiten",
        "func": "// Daten aus dem msg.payload Objekt extrahieren\nlet temperaturWert = msg.payload.temperatur;\nlet durchflussWert = msg.payload.durchfluss;\n\n// Servo-Status aus dem Flow-Kontext holen (wird von Steuerlogik-Ausgang 2 gesetzt)\nlet servoStatusBool = flow.get(\"servoStatus\"); // Holt true oder false\n\n// Wert für die Datenbank vorbereiten -> \"ON\" oder \"OFF\" für den Servo\nlet servoStatusDb = (servoStatusBool === true) ? \"ON\" : \"OFF\"; \n\n// SQL-Query als Topic setzen (unverändert)\nmsg.topic = \"INSERT INTO messwerte (temperatur, durchfluss, servo_aktiv) VALUES (?, ?, ?)\";\n\n// Das Array mit den Werten für die Platzhalter erstellen\nmsg.payload = [temperaturWert, durchflussWert, servoStatusDb];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 40,
        "wires": [
            [
                "b2b519115a12bb3b"
            ]
        ]
    },
    {
        "id": "4a8f207cbeecf7f8",
        "type": "mqtt out",
        "z": "99696e55a19fa296",
        "name": "Servo Ansteuerung",
        "topic": "esp32/servo/set",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b18a955c8d8ca218",
        "x": 890,
        "y": 460,
        "wires": []
    },
    {
        "id": "0f5e20f68bfd2629",
        "type": "ui_switch",
        "z": "99696e55a19fa296",
        "name": "",
        "label": "Servo Handbetrieb",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 9,
        "width": 4,
        "height": 3,
        "passthru": false,
        "decouple": "false",
        "topic": "ui/manual_servo",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 290,
        "y": 400,
        "wires": [
            [
                "8114fd31f2d5e8b3"
            ]
        ]
    },
    {
        "id": "900f1508a48262b3",
        "type": "ui_numeric",
        "z": "99696e55a19fa296",
        "name": "",
        "label": "Automatikbetrieb: Schwellenwert EIN L/min",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 3,
        "width": 8,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "ui/threshold_on",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "11",
        "step": "0.5",
        "className": "",
        "x": 250,
        "y": 580,
        "wires": [
            [
                "8114fd31f2d5e8b3"
            ]
        ]
    },
    {
        "id": "473374c85a893135",
        "type": "ui_switch",
        "z": "99696e55a19fa296",
        "name": "",
        "label": "Handbetrieb EIN",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 5,
        "width": 8,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "ui/mode",
        "topicType": "str",
        "style": "",
        "onvalue": "MANUAL",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "AUTO",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 290,
        "y": 520,
        "wires": [
            [
                "8114fd31f2d5e8b3",
                "880d29ed7454eea5"
            ]
        ]
    },
    {
        "id": "8114fd31f2d5e8b3",
        "type": "function",
        "z": "99696e55a19fa296",
        "name": "Steuerlogik",
        "func": "// Variablen aus dem Flow-Kontext holen (mit Standardwerten)\nlet mode = flow.get(\"controlMode\") || \"AUTO\"; // Standard: Automatik\nlet thresholdOn = flow.get(\"thresholdOn\") || 9.0; // Standard EIN-Schwelle (Beispiel)\nlet thresholdOff = flow.get(\"thresholdOff\") || 10.0; // Standard AUS-Schwelle (Beispiel)\nlet manualCommand = flow.get(\"lastManualCommand\") || \"OFF\"; // Letzter manueller Zustand\nlet currentFlow = flow.get(\"currentFlow\") || -1; // Letzter bekannter Flusswert\n// Aktuellen/letzten *gesendeten* Zustand für Hysterese holen. Wichtig VOR der Logik.\nlet currentServoState = flow.get(\"lastSentCommand\") || \"OFF\";\nlet triggeredByModeChange = false; // Flag für jede Ausführung zurücksetzen\n\n// Kontext aktualisieren basierend auf dem Auslöser der Nachricht\nif (msg.topic === 'ui/mode') {\n    mode = msg.payload;\n    flow.set(\"controlMode\", mode);\n    triggeredByModeChange = true; // Flag setzen, dass Modus geändert wurde\n} else if (msg.topic === 'ui/threshold_on') { // Neuer Topic für EIN-Schwelle\n    thresholdOn = Number(msg.payload);\n    // Optional: Grundlegende Validierung, z.B. nicht negativ\n    if (thresholdOn < 0) { thresholdOn = 0; }\n    flow.set(\"thresholdOn\", thresholdOn);\n} else if (msg.topic === 'ui/threshold_off') { // Neuer Topic für AUS-Schwelle\n    thresholdOff = Number(msg.payload);\n     // Optional: Grundlegende Validierung\n    if (thresholdOff < 0) { thresholdOff = 0; }\n    flow.set(\"thresholdOff\", thresholdOff);\n} else if (msg.topic === 'ui/manual_servo') {\n    manualCommand = msg.payload;\n    flow.set(\"lastManualCommand\", manualCommand);\n} else if (typeof msg.payload === 'number' && msg.topic !== 'ui/threshold_on' && msg.topic !== 'ui/threshold_off') {\n    // Annehmen, dass eine Zahl ohne bekanntes Topic der neue Flusswert ist\n    currentFlow = msg.payload;\n    flow.set(\"currentFlow\", currentFlow);\n}\n\nlet servoCommand = \"OFF\"; // Standard-Servobefehl initialisieren\n\n// Logik: Entscheide den Servo-Befehl basierend auf dem Modus\nif (mode === \"MANUAL\") {\n    // Im manuellen Modus gilt der zuletzt gesetzte manuelle Befehl\n    servoCommand = manualCommand;\n} else { // AUTO Modus mit Hysterese\n    // Sicherheitscheck / Korrektur direkt vor der Verwendung\n    // Stellt sicher, dass AUS-Schwelle höher als EIN-Schwelle ist\n    if (thresholdOff <= thresholdOn) {\n        // Fallback: Aus-Schwelle leicht über Ein-Schwelle setzen\n        thresholdOff = thresholdOn + 1.0; // Beispiel: Aus immer mind. 1 L/min über Ein\n    }\n\n    if (currentFlow >= 0) { // Nur wenn Flusswert gültig ist\n        if (currentServoState === \"OFF\" && currentFlow < thresholdOn) {\n            // Bedingung zum EINSCHALTEN: War AUS und Fluss ist UNTER Einschalt-Schwelle gefallen\n            servoCommand = \"ON\";\n        } else if (currentServoState === \"ON\" && currentFlow >= thresholdOff) {\n            // Bedingung zum AUSSCHALTEN: War AN und Fluss ist ÜBER (oder gleich) Ausschalt-Schwelle gestiegen\n            servoCommand = \"OFF\";\n        } else {\n            // Ansonsten: Zustand beibehalten\n            servoCommand = currentServoState;\n        }\n    } else {\n        // Bei ungültigem Flusswert sicherheitshalber AUS\n        servoCommand = \"OFF\";\n    }\n}\n\n// Prüfung, ob MQTT-Nachricht gesendet werden soll\nlet allowMqttSend = true;\n// Senden bei Wechsel zu Manual unterdrücken\nif (triggeredByModeChange && mode === \"MANUAL\") {\n    allowMqttSend = false;\n}\n// Senden bei reiner Threshold-Änderung unterdrücken (jetzt für beide Schwellen)\nelse if (msg.topic === 'ui/threshold_on' || msg.topic === 'ui/threshold_off') {\n    allowMqttSend = false;\n}\n\n// Vorbereitung der MQTT-Nachricht (Optimierung: nur senden, wenn erlaubt und Befehl geändert)\n// Hole den zuletzt *tatsächlich gesendeten* Befehl für den Vergleich\nlet lastSentCommand = flow.get(\"lastSentCommand\") || \"\";\nlet mqttMsg = null;\n\nif (allowMqttSend && servoCommand !== lastSentCommand) {\n    flow.set(\"lastSentCommand\", servoCommand); // Neuen Zustand für nächsten Vergleich speichern\n    mqttMsg = {\n        payload: servoCommand\n        // Das Topic wird im nachfolgenden MQTT Out Node gesetzt\n    };\n}\n\n// Nachricht für die LED im Dashboard vorbereiten (wird immer gesendet)\nlet ledMsg = { payload: (servoCommand === \"ON\") }; // true für ON, false für OFF\n\n// Nachrichten an die beiden Ausgänge senden\n// Ausgang 1: MQTT Befehl (kann null sein)\n// Ausgang 2: LED Status (immer true oder false)\nreturn [ mqttMsg, ledMsg ];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 480,
        "wires": [
            [
                "4a8f207cbeecf7f8"
            ],
            [
                "2b21126f97ea4225",
                "670d14cc24668114"
            ]
        ]
    },
    {
        "id": "880d29ed7454eea5",
        "type": "change",
        "z": "99696e55a19fa296",
        "name": "Servo aus",
        "rules": [
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "$$.payload = \"MANUAL\"",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 460,
        "wires": [
            [
                "0f5e20f68bfd2629"
            ]
        ]
    },
    {
        "id": "670d14cc24668114",
        "type": "change",
        "z": "99696e55a19fa296",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "servoStatus",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 900,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "1ff3314c74a71efe",
        "type": "ui_numeric",
        "z": "99696e55a19fa296",
        "name": "",
        "label": "Automatikbetrieb: Schwellenwert AUS L/min",
        "tooltip": "",
        "group": "25a2b5d2092b71fa",
        "order": 4,
        "width": 8,
        "height": 2,
        "wrap": false,
        "passthru": true,
        "topic": "ui/threshold_off",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "11",
        "step": "0.5",
        "className": "",
        "x": 250,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "93ef7c177c088b97",
        "type": "ui_spacer",
        "z": "99696e55a19fa296",
        "name": "spacer",
        "group": "25a2b5d2092b71fa",
        "order": 10,
        "width": 8,
        "height": 1
    },
    {
        "id": "c54cdd0c522e35af",
        "type": "ui_spacer",
        "z": "99696e55a19fa296",
        "name": "spacer",
        "group": "25a2b5d2092b71fa",
        "order": 11,
        "width": 8,
        "height": 1
    },
    {
        "id": "6736fddeee55337a",
        "type": "ui_spacer",
        "z": "99696e55a19fa296",
        "name": "spacer",
        "group": "25a2b5d2092b71fa",
        "order": 12,
        "width": 8,
        "height": 1
    },
    {
        "id": "b18a955c8d8ca218",
        "type": "mqtt-broker",
        "name": "MQTT",
        "broker": "127.0.0.1",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "25a2b5d2092b71fa",
        "type": "ui_group",
        "name": "Aquarium",
        "tab": "2cc9ed1e8e85e295",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc803e8d57774319",
        "type": "MySQLdatabase",
        "name": "Datenbank",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "nodered_daten",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "2cc9ed1e8e85e295",
        "type": "ui_tab",
        "name": "Aquarium",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]